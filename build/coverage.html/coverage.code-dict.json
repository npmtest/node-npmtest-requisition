{"/home/travis/build/npmtest/node-npmtest-requisition/test.js":"/* istanbul instrument in package npmtest_requisition */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-requisition/lib.npmtest_requisition.js":"/* istanbul instrument in package npmtest_requisition */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_requisition = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_requisition = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-requisition/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-requisition && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_requisition */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_requisition\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_requisition.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_requisition.rollup.js'] =\n            local.assetsDict['/assets.npmtest_requisition.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_requisition.__dirname + '/lib.npmtest_requisition.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-requisition/node_modules/requisition/lib/index.js":"\nvar assert = require('assert');\nvar methods = require('methods');\n\nvar Request = require('./request');\n\nmodule.exports = request;\n\nfunction request(url, opts) {\n  return new Request('GET', url, opts);\n}\n\nmethods.forEach(function (method) {\n  var METHOD = method.toUpperCase();\n  request[method] = function request(url, opts) {\n    return new Request(METHOD, url, opts);\n  }\n})\n\nrequest.defaults = function (defaults) {\n  assert(typeof defaults === 'object');\n  var keys = Object.keys(defaults);\n\n  function request(url, opts) {\n    opts = opts || {};\n    keys.forEach(function (key) {\n      if (opts[key] == null) opts[key] = defaults[key];\n    });\n    return new Request('GET', url, opts);\n  }\n\n  methods.forEach(function (method) {\n    var METHOD = method.toUpperCase();\n    request[method] = function request(url, opts) {\n      opts = opts || {};\n      keys.forEach(function (key) {\n        if (opts[key] == null) opts[key] = defaults[key];\n      });\n      return new Request(METHOD, url, opts);\n    }\n  })\n\n  return request;\n}\n","/home/travis/build/npmtest/node-npmtest-requisition/node_modules/requisition/lib/request.js":"\nvar url = require('url');\nvar fs = require('mz/fs');\nvar path = require('path');\nvar http = require('http');\nvar https = require('https');\nvar cookie = require('cookie');\nvar qs = require('querystring');\nvar memo = require('memorizer');\nvar status = require('statuses');\nvar mime = require('mime-types');\nvar destroy = require('destroy');\nvar typer = require('media-typer');\nvar createError = require('http-errors');\nvar Promise = require('any-promise');\n\nvar Response = require('./response');\n\nmodule.exports = Request;\n\nfunction Request(method, uri, _options) {\n  var options = this.options = url.parse(uri, true);\n  if (_options) for (var key in _options) options[key] = _options[key];\n  options.method = method;\n  var headers =\n  options.headers =\n  this.headers = options.headers || {};\n  headers['accept-encoding'] = headers['accept-encoding'] || 'gzip';\n  headers['user-agent'] = headers['user-agent'] || 'https://github.com/thenables/requisition';\n  this._http = options.protocol === 'https:' ? https : http;\n  this.redirects(options.redirects || 3);\n  this._cookie = '';\n  this._redirects = 0;\n  this._redirectList = [];\n}\n\n/**\n * Set header\n *\n * Examples:\n *\n *   .set('Accept', 'application/json')\n *   .set({ Accept: 'application/json' })\n *\n * @param {String|Object} key\n * @param {String} value\n * @return {Request}\n * @api public\n */\nRequest.prototype.set = function (key, value) {\n  var headers = this.options.headers;\n  // TODO: use Object.keys()\n  if (typeof key === 'object') for (var x in key) headers[x] = key[x];\n  else headers[key] = value;\n  return this;\n}\n\n/**\n * Set Authorization\n *\n * Examples:\n *\n *   .auth('user', '1234')\n *   .auth('user:1234')\n *   .auth('user')\n *\n * @param {String} name\n * @param {String} pass\n * @return {Request}\n * @api public\n */\nRequest.prototype.auth = function (name, pass) {\n  pass = pass || '';\n  if (!~name.indexOf(':')) name += ':';\n  var str = new Buffer(name + pass).toString('base64');\n  this.set('Authorization', 'Basic ' + str);\n  return this;\n}\n\n/**\n * Set http agent\n *\n * @param {http.Agent} agent\n * @return {Request}\n * @api public\n */\nRequest.prototype.agent = function (agent) {\n  var options = this.options;\n  if (agent instanceof http.Agent) options.agent = agent;\n  else options.agent = false;\n  return this;\n}\n\n/**\n * Set timeout\n *\n * @param {Number} ms\n * @return {Request}\n * @api public\n */\nRequest.prototype.timeout = function (ms) {\n  this._timeout = ms;\n  return this;\n}\n\n/**\n * Clear timeout\n *\n * @return {Request}\n * @api public\n */\nRequest.prototype.clearTimeout = function () {\n  this._timeout = 0;\n  clearTimeout(this._timer);\n  return this;\n}\n\n/**\n * Set max redirects\n *\n * @param {Number} num\n * @return {Request}\n * @api public\n */\nRequest.prototype.redirects = function (num) {\n  this._maxRedirects = num;\n  return this;\n}\n\n/**\n * Set header `If-Modified-Since`\n *\n * Examples:\n *\n *   .ifModifiedSince(1418974642467)\n *   .ifModifiedSince('2015-01-01')\n *   .ifModifiedSince(new Date())\n *\n * @param {Date|string|number} date\n * @return {Request}\n * @api public\n */\nRequest.prototype.ifModifiedSince = function (date) {\n  if (typeof date === 'number' || typeof date === 'string') date = new Date(date);\n  this.set('If-Modified-Since', date.toUTCString());\n  return this;\n}\n\n/**\n * Set header `If-None-Match`\n *\n * @param {String} value\n * @return {Request}\n * @api public\n */\nRequest.prototype.ifNoneMatch = function (value) {\n  this.set('If-None-Match', value);\n  return this;\n}\n\n/**\n * Set header `Content-Type`\n *\n * Examples:\n *\n *   .type('json')\n *   .type('application/json')\n *\n * @param {String} type\n * @return {Request}\n * @api public\n */\nRequest.prototype.type = function (type) {\n  var type = mime.contentType(type);\n  if (type) this.options.headers['content-type'] = type;\n  return this;\n}\n\n/**\n * Set cookie\n *\n * @param {String} key\n * @param {String} value\n * @param {Object} options\n * @api public\n */\n\nRequest.prototype.cookie = function (key, value, options) {\n  var args = Array.prototype.slice.call(arguments);\n  var hdr = cookie.serialize.apply(null, args);\n  this._cookie = this._cookie ? this._cookie + '; ' + hdr : hdr;\n  this.set('Cookie', this._cookie);\n  return this;\n}\n\n/**\n * Add query string\n *\n * @param {Object} object\n * @return {Request}\n * @api public\n */\nRequest.prototype.query = function (object) {\n  var query = this.options.query;\n\n  // TODO: use Object.keys()\n  for (var i in object) {\n    query[i] = object[i];\n  }\n\n  return this;\n}\n\n/**\n * Send data\n *\n * Examples:\n *\n *   .send('name=hello')\n *   .send({ name: 'hello' })\n *\n * @param {String|Object} body\n * @return {Request}\n * @api public\n */\nRequest.prototype.send = function (body) {\n  var type = this.options.headers['content-type'];\n\n  if (isObject(body) && isObject(this._body)) {\n    // merge body\n    // TODO: use Object.assign()\n    for (var key in body) {\n      this._body[key] = body[key];\n    }\n  } else if (typeof body === 'string') {\n    if (!type) {\n      this.options.headers['content-type'] = type = 'application/x-www-form-urlencoded';\n    }\n\n    if (typer.parse(type).subtype === 'x-www-form-urlencoded') {\n      this._body = this._body ? this._body + '&' + body : body;\n    } else {\n      this._body = (this._body || '') + body;\n    }\n  } else {\n    this._body = body;\n  }\n\n  // default to json\n  if (!type) this.type('json');\n\n  return this;\n}\n\n/**\n * Send file\n *\n * @param {String} filename\n * @return {Request}\n * @api public\n */\nRequest.prototype.sendFile = function (filename) {\n  this.options.filename = path.resolve(filename);\n  this.type(path.basename(filename));\n  return this;\n}\n\nRequest.prototype.then = function (resolve, reject) {\n  return this.promise.then(resolve, reject);\n}\n\nRequest.prototype.catch = function (reject) {\n  return this.promise.catch(reject);\n}\n\nRequest.prototype.expectContinue = function () {\n  this.options.headers.expect = '100-continue';\n  this._expectContinue = true;\n  return this;\n}\n\nRequest.prototype._create = function () {\n  this.request = this.request || this._http.request(this.options);\n\n  if (this._timeout && !this._timer) {\n    var self = this;\n    this._timer = setTimeout(function () {\n      self.request.abort();\n      self.request.emit('error', createError(408, 'Request Time-out'));\n    }, this._timeout);\n  }\n  return this.request;\n}\n\nRequest.prototype.setLength = function () {\n  var self = this;\n  var headers = self.options.headers;\n  if (headers['content-length']) return Promise.resolve();\n\n  var filename = this.options.filename;\n  if (filename) return fs.stat(filename).then(function (stats) {\n    headers['content-length'] = String(stats.size);\n  });\n\n  return Promise.resolve();\n}\n\nRequest.prototype.redirect = function (res) {\n  var max = this._maxRedirects;\n  if (!max || this._redirects >= max) {\n    res.redirects = this._redirectList;\n    return Promise.resolve(new Response(this.request, res, this.options));\n  }\n\n  this._redirects++;\n  var uri = res.headers.location;\n  var options = this.options;\n  var method = options.method;\n\n  // location\n  if (!~uri.indexOf('://')) {\n    if (uri.indexOf('//') !== 0) {\n      uri = '//' + options.host + uri;\n    }\n    uri = options.protocol + uri;\n  }\n\n  res.resume();\n\n  delete this.request;\n  options = this.options = url.parse(uri, true);\n  options.method = method === 'HEAD' ? 'HEAD' : 'GET';\n  this._http = options.protocol === 'https:' ? https : http;\n  this.headers = options.headers = cleanHeader(this.headers) || {};\n\n  // redirect\n  this._body = null;\n  this._redirectList.push(uri);\n  var self = this;\n\n  return new Promise(function (resolve, reject) {\n    var req = self._create();\n\n    req.on('error', /* istanbul ignore next */ function (err) {\n      reject(err);\n    });\n    req.on('response', function (res) {\n      res.redirects = self._redirectList;\n      if (status.redirect[res.statusCode]) return resolve(self.redirect(res));\n\n      resolve(new Response(req, res, self.options));\n    });\n\n    req.end();\n  })\n}\n\nRequest.prototype._sendFile = function () {\n  var self = this;\n  return new Promise(function (resolve, reject) {\n    var req = self._create();\n    var stream = fs.createReadStream(self.options.filename);\n    stream.on('error', /* istanbul ignore next */ function (err) {\n      req.abort();\n      reject(err);\n    });\n    req.on('error', /* istanbul ignore next */ function (err) {\n      destroy(stream);\n      reject(err);\n    });\n    req.on('response', function (res) {\n      self.clearTimeout();\n      if (status.redirect[res.statusCode]) return resolve(self.redirect(res));\n\n      resolve(new Response(req, res, self.options));\n    });\n    req.on('close', /* istanbul ignore next */ function () {\n      destroy(stream);\n    })\n    stream.pipe(req);\n  })\n}\n\nRequest.prototype._send = function () {\n  var self = this;\n  var body = this._body;\n  var options = this.options;\n\n  return new Promise(function (resolve, reject) {\n    // body\n    var type = options.headers['content-type'];\n\n    if (isObject(body)) {\n      if (typer.parse(type).subtype === 'x-www-form-urlencoded') {\n        body = qs.stringify(body);\n      } else {\n        body = JSON.stringify(body);\n      }\n    }\n\n    if (!options.headers['content-length'])\n      options.headers['content-length'] = Buffer.byteLength(body);\n\n    var req = self._create();\n\n    req.on('error', /* istanbul ignore next */ function (err) {\n      reject(err);\n    });\n    req.on('response', function (res) {\n      self.clearTimeout();\n      if (status.redirect[res.statusCode]) return resolve(self.redirect(res));\n\n      resolve(new Response(req, res, self.options));\n    });\n\n    req.end(body);\n  })\n}\n\nmemo(Request.prototype, 'promise', function () {\n  var self = this;\n  var options = this.options;\n\n  return this.setLength().then(function () {\n    // querystring\n    var querystring = qs.stringify(options.query);\n    if (querystring) options.path = options.pathname + '?' + querystring;\n\n    if (self._expectContinue) return new Promise(function (resolve, reject) {\n      // TODO: timeout\n      // TODO: proper event cleanup\n      self._create()\n      .on('error', reject)\n      .on('continue', resolve);\n    }).then(function () {\n      if (self.options.filename) return self._sendFile();\n    });\n\n    if (self.options.filename) return self._sendFile();\n\n    if (self._body) return self._send();\n\n    return new Promise(function (resolve, reject) {\n      var req = self._create()\n      .on('error', reject)\n      .on('response', function (res) {\n        self.clearTimeout();\n        if (status.redirect[res.statusCode]) return resolve(self.redirect(res));\n\n        resolve(new Response(req, res, self.options));\n      });\n\n      // TODO: handle the request body\n      req.end();\n    })\n  })\n});\n\n// TODO: use lodash\nfunction isObject(obj) {\n  return obj != null && typeof obj === 'object';\n}\n\nfunction cleanHeader(header) {\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['cookie'];\n  delete header['host'];\n  return header;\n}\n","/home/travis/build/npmtest/node-npmtest-requisition/node_modules/requisition/lib/response.js":"\nvar parseLinkHeader = require('parse-link-header');\nvar toArray = require('stream-to-array');\nvar temp_path = require('temp-path');\nvar Promise = require('any-promise');\nvar typeis = require('type-is').is;\nvar statuses = require('statuses');\nvar typer = require('media-typer');\nvar memo = require('memorizer');\nvar cookie = require('cookie');\nvar zlib = require('zlib');\nvar cp = require('fs-cp');\n\nvar slice = [].slice;\n\nmodule.exports = Response;\n\nfunction Response(req, res, options) {\n  this.request = req;\n  this.response = res;\n  this.options = options;\n\n  this.status =\n  this.statusCode = res.statusCode;\n  this.header =\n  this.headers = res.headers;\n\n  // empty the stream when the response body is irrelevant\n  // because node streams are dumb like that\n  var status = this.status;\n  if (this.length === 0\n    || statuses.empty[status]\n    || statuses.redirect[status]) res.resume();\n}\n\n// All response properties\n\nmemo(Response.prototype, 'length', function () {\n  var length = this.response.headers['content-length'];\n  if (length != null) return ~~length;\n})\n\n/**\n * Get the link header\n *\n * @return {Object}\n * @api public\n */\n\nmemo(Response.prototype, 'links', function () {\n  var links = this.get('Link');\n  if (links) return parseLinkHeader(links);\n})\n\n/**\n * Get the location header.\n *\n * @return {String}\n * @api public\n */\n\nmemo(Response.prototype, 'location', function () {\n  return this.get('Location');\n})\n\n/**\n * Get charset\n *\n * @return {String}\n * @api public\n */\n\nmemo(Response.prototype, 'charset', function () {\n  var type = this.get('Content-Type');\n  if (!type) return;\n\n  return typer.parse(type).parameters.charset;\n})\n\n/**\n * Get header `ETag`\n *\n * @return {String}\n * @api public\n */\n\nmemo(Response.prototype, 'etag', function () {\n  return this.get('ETag');\n})\n\n/**\n * Get header `Last-Modified`\n *\n * @return {Date}\n * @api public\n */\n\nmemo(Response.prototype, 'lastModified', function () {\n  var date = this.get('Last-Modified');\n  if (date) return new Date(date);\n})\n\n/**\n * Get cookies\n *\n * @return {Object}\n * @api public\n */\n\nmemo(Response.prototype, 'cookies', function () {\n  var cookieString = this.get('Set-Cookie');\n\n  if (Array.isArray(cookieString)) {\n    cookieString = cookieString.join(';');\n  }\n\n  if (cookieString) return cookie.parse(cookieString);\n})\n\n// All response methods\n\n/**\n * Get header\n *\n * @param {String} key\n * @return {String}\n * @api public\n */\n\nResponse.prototype.get = function (key) {\n  return this.response.headers[key.toLowerCase()];\n}\n\nResponse.prototype.is = function (types) {\n  var type = this.headers['content-type'];\n  if (!type) return false;\n  if (!Array.isArray(types)) types = slice.call(arguments);\n  return typeis(type, types);\n}\n\nResponse.prototype.buffer = function () {\n  return toArray(this.response).then(concatBuffer);\n}\n\n// TODO: do we have to wrap this in a closure?\nfunction concatBuffer(arr) {\n  return Buffer.concat(arr);\n}\n\n// TODO: use raw-body and inflation once it returns a promise\nResponse.prototype.text = function () {\n  var stream = this.response;\n  return new Promise(function (resolve, reject) {\n    switch (stream.headers['content-encoding']) {\n      case 'gzip':\n        stream = stream.on('error', reject).pipe(zlib.createGunzip());\n        break;\n      /* istanbul ignore next */\n      case 'deflate':\n        stream = stream.on('error', reject).pipe(zlib.createInflate());\n        break;\n    }\n    var str = '';\n    stream.setEncoding('utf8');\n    stream.on('data', function (chunk) {\n      str += chunk;\n    });\n    stream.on('error', reject);\n    stream.on('end', function () {\n      resolve(str);\n    });\n  })\n}\n\nResponse.prototype.json = function () {\n  return this.text().then(JSON.parse);\n}\n\nResponse.prototype.saveTo = function (filename) {\n  var stream = this.response;\n  var encoding = stream.headers['content-encoding'];\n\n  // TODO: handle `stream.on('error')` errors by wrapping everythign in a promise\n  switch (encoding) {\n    case 'gzip':\n      stream = stream.pipe(zlib.createGunzip());\n      break;\n    /* istanbul ignore next */\n    case 'deflate':\n      stream = stream.pipe(zlib.createInflate());\n      break;\n  }\n\n  return cp(stream, filename || temp_path());\n}\n\nResponse.prototype.pipe = function (dest, opts) {\n  return this.response.pipe(dest, opts);\n}\n\nResponse.prototype.dump = function () {\n  this.response.resume();\n  return this;\n}\n\nResponse.prototype.destroy = function () {\n  this.response.destroy();\n  return this;\n}\n"}